import { configureStore } from "@reduxjs/toolkit";
import authReducer from "../features/authSlice";
import blogReducer from "../features/blogSlice";
import storage from "redux-persist/lib/storage/"; // Defaults to using localStorage for web storage.
import newsReducer from "../features/newsSlice"

// 1. We import necessary modules and reducers for configuring the Redux store and implementing Redux Persist.
import {
  persistStore,
  persistReducer,
  FLUSH,
  REHYDRATE,
  PAUSE,
  PERSIST,
  PURGE,
  REGISTER,
} from "redux-persist";

// 2. Configuration for Redux Persist:
//    - 'persistConfig' is an object that contains settings for Redux Persist.
//    - 'key' is a unique identifier used to distinguish the persisted state in storage.
//    - 'storage' specifies the storage engine to use, and in this case, it defaults to using the browser's localStorage for web applications.

// Configuration for Redux Persist:
const persistConfig = {
  key: "root",           // A unique key to identify the persisted state in storage.
  storage,               // The storage engine to use, which defaults to localStorage for web.
};

// 3. Create a persisted version of the 'authReducer' using Redux Persist:
//    - 'persistedReducer' is a new reducer that wraps 'authReducer' and adds persistence functionality.
//    - When actions are dispatched, Redux Persist will automatically save and load the state to/from storage for 'authReducer'.

// Create a persisted version of the authReducer using Redux Persist:
const persistedReducer = persistReducer(persistConfig, authReducer);


// 4. We configure the Redux store using Redux Toolkit, providing the reducers and middleware.
const store = configureStore({
  // 5. Reducers:
  //    - We specify the reducers for each slice of state.
  //    - 'auth' uses the persisted version of the 'authReducer' for handling authentication-related state.
  //    - 'blog' uses 'blogReducer' for handling blog-related state.
  //    - 'news' uses 'newsReducer' for handling news-related state.
  reducer: {
    auth: persistedReducer, // Use the persisted version of the authReducer.
    blog: blogReducer,     // Add the blogReducer to handle blog-related state.
    news: newsReducer      // Add the newsReducer to handle news-related state.
  },

  // 6. Middleware Configuration:
  // - Middleware is a mechanism that enhances the action handling process in Redux.
  // - It allows you to intercept, modify, or process actions BEFORE they reach the reducers.
  // - Middleware functions are executed in the order they are defined.
  // - In this configuration, we customize the middleware behavior using the 'getDefaultMiddleware' function.

  // Middleware configuration:
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      // Redux Toolkit includes a serializable check for actions by default.
      // This check ensures that actions can be serialized for tools like Redux DevTools.
      // However, certain actions generated by Redux Persist can and should be ignored
      // to prevent warnings or errors related to non-serializable actions.
      serializableCheck: {
        // List of action types that should be ignored by the serializable check:
        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],
      },
    }),

  // 7. Development Tools:
  //  - We enable Redux DevTools only in the development environment to aid debugging.
  // Enable Redux DevTools in development mode.
  devTools: process.env.NODE_ENV !== "production",
});

// Explanation of Middleware:
// - Middleware functions are like gatekeepers for actions before they reach reducers.
// - They can intercept, modify, or process actions, but they don't interfere with the normal
//   operation of other actions and reducers.
// - In this configuration, we use middleware to enhance Redux's functionality.
// - The 'serializableCheck' middleware is customized to allow certain actions generated
//   by Redux Persist to pass through without causing serialization-related warnings or errors.
// - Middleware functions run in the order they are defined, but they don't disrupt the flow
//   of regular actions and reducers, ensuring smooth interaction with the Redux store.

// 8. Persistor:
//    - We create a 'persistor' to enable state persistence using Redux Persist. The 'persistor' works in
//      conjunction with the Redux store to save and retrieve the state from storage.
// Create a persistor to persist the store.
export const persistor = persistStore(store);

// 9. Export:
//    - We export the configured Redux store as the default export, making it accessible throughout the application.
// Export the configured Redux store as the default export.
export default store;